name: Weekly Tranco Update

on:
  schedule:
    # Runs at 00:00 UTC every Monday
    - cron: '0 0 * * 1'
  # Allow manual triggering
  workflow_dispatch:

# Set permissions for the GITHUB_TOKEN
permissions:
  contents: write
  pull-requests: write

jobs:
  update-tranco:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      - name: Set up date variables
        id: date
        run: |
          echo "today=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
          echo "timestamp=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT
      
      - name: Fetch Tranco list ID
        id: tranco-id
        run: |
          MAX_RETRIES=5
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "Attempt $(($RETRY_COUNT + 1)) to fetch Tranco list ID..."
            TRANCO_ID=$(curl -s --max-time 30 https://tranco-list.eu/top-1m-id)
            
            # Check if we got a valid ID (non-empty and contains alphanumeric characters)
            if [[ ! -z "$TRANCO_ID" && "$TRANCO_ID" =~ ^[A-Za-z0-9]+$ ]]; then
              echo "id=$TRANCO_ID" >> $GITHUB_OUTPUT
              echo "Successfully fetched Tranco list ID: $TRANCO_ID"
              break
            else
              RETRY_COUNT=$(($RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "Failed to fetch valid Tranco list ID. Retrying in 30 seconds..."
                sleep 30
              else
                echo "Failed to fetch valid Tranco list ID after $MAX_RETRIES attempts."
                exit 1
              fi
            fi
          done
      
      - name: Download Tranco list
        id: download
        run: |
          MAX_RETRIES=5
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "Attempt $(($RETRY_COUNT + 1)) to download Tranco list ${{ steps.tranco-id.outputs.id }}..."
            
            if curl -s -L --max-time 300 "https://tranco-list.eu/download_daily/${{ steps.tranco-id.outputs.id }}" -o tranco.zip; then
              echo "Successfully downloaded Tranco list ${{ steps.tranco-id.outputs.id }}"
              break
            fi
            
            RETRY_COUNT=$(($RETRY_COUNT + 1))
            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
              echo "Failed to download Tranco list. Retrying in 60 seconds..."
              sleep 60
            else
              echo "Failed to download Tranco list after $MAX_RETRIES attempts."
              exit 1
            fi
          done
      
      - name: Extract Tranco list
        id: extract
        run: |
          if unzip -o tranco.zip; then
            if [ -f "top-1m.csv" ]; then
              echo "Successfully extracted Tranco list"
            else
              echo "Expected file 'top-1m.csv' not found in the zip archive"
              ls -la
              exit 1
            fi
          else
            echo "Failed to extract zip file"
            exit 1
          fi
      
      - name: Validate Tranco list
        id: validate
        run: |
          # Count lines to verify it's exactly 1 million
          LINE_COUNT=$(wc -l < top-1m.csv)
          
          # Verify the first line starts with "1,"
          FIRST_LINE=$(head -n 1 top-1m.csv)
          
          # Verify the last line starts with "1000000,"
          LAST_LINE=$(tail -n 1 top-1m.csv)
          
          if [ "$LINE_COUNT" -eq 1000000 ] && [[ "$FIRST_LINE" =~ ^1, ]] && [[ "$LAST_LINE" =~ ^1000000, ]]; then
            echo "File validation passed:"
            echo "- Exactly 1,000,000 lines"
            echo "- First line: $FIRST_LINE"
            echo "- Last line: $LAST_LINE"
            
            # Move the file to desired location
            mv top-1m.csv tranco.csv
          else
            echo "File validation failed:"
            echo "- Line count: $LINE_COUNT (expected 1,000,000)"
            echo "- First line: $FIRST_LINE (should start with '1,')"
            echo "- Last line: $LAST_LINE (should start with '1000000,')"
            exit 1
          fi
      
      - name: Create and push branch
        id: create-branch
        run: |
          # Create a unique branch name with timestamp
          BRANCH_NAME="tranco_update-${{ steps.date.outputs.today }}-${{ steps.date.outputs.timestamp }}"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          echo "=== DIAGNOSTIC: Initial git status ==="
          git status
          
          echo "=== DIAGNOSTIC: Current branches ==="
          git branch -a
          
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          echo "=== Creating new branch: $BRANCH_NAME ==="
          git checkout -b "$BRANCH_NAME"
          
          echo "=== DIAGNOSTIC: After branch creation ==="
          git branch -a
          
          echo "=== Adding and committing file ==="
          git add tranco.csv
          git commit -m "Update Tranco list for ${{ steps.date.outputs.today }} (ID: ${{ steps.tranco-id.outputs.id }})"
          
          echo "=== DIAGNOSTIC: After commit ==="
          git status
          git log -n 2 --oneline
          
          echo "=== Pushing branch ==="
          git push origin "$BRANCH_NAME"
          
          echo "=== DIAGNOSTIC: After push ==="
          git status
          git branch -a
      
      - name: Create Pull Request
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "=== DIAGNOSTIC: Environment variables ==="
          echo "GITHUB_REPOSITORY: $GITHUB_REPOSITORY"
          echo "BRANCH_NAME: ${{ steps.create-branch.outputs.branch_name }}"
          echo "GITHUB_TOKEN set: $([ -n "$GITHUB_TOKEN" ] && echo 'true' || echo 'false')"
          
          echo "=== DIAGNOSTIC: Current git status ==="
          git status
          
          echo "=== DIAGNOSTIC: Current branches ==="
          git branch -a
          
          echo "=== DIAGNOSTIC: Remote branches ==="
          git ls-remote --heads origin
          
          echo "=== DIAGNOSTIC: Comparing branches ==="
          echo "Commit on main:"
          git show main --no-patch --format="%H %s"
          echo "Commit on feature branch:"
          git show ${{ steps.create-branch.outputs.branch_name }} --no-patch --format="%H %s" || echo "Branch not found locally"
          
          echo "=== DIAGNOSTIC: Commit count ==="
          echo "Commits on main: $(git rev-list --count main)"
          echo "Commits on feature branch: $(git rev-list --count ${{ steps.create-branch.outputs.branch_name }} 2>/dev/null || echo 'Branch not found')"
          echo "Commits between branches: $(git rev-list --count main..${{ steps.create-branch.outputs.branch_name }} 2>/dev/null || echo 'Cannot compare')"
          
          echo "=== DIAGNOSTIC: gh version ==="
          gh --version
          
          echo "=== DIAGNOSTIC: Creating PR ==="
          gh pr create \
            --title "Update Tranco list - ${{ steps.date.outputs.today }}" \
            --body "This PR updates the Tranco top 1 million domains list.
            
            - Date: ${{ steps.date.outputs.today }}
            - Tranco List ID: ${{ steps.tranco-id.outputs.id }}
            - List URL: https://tranco-list.eu/list/${{ steps.tranco-id.outputs.id }}
            - Automated update via GitHub Actions" \
            --head "${{ steps.create-branch.outputs.branch_name }}" \
            --base "main" || echo "PR creation failed with exit code $?"
