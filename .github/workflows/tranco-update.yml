name: Weekly Tranco Update

on:
  schedule:
    # Runs at 00:00 UTC every Monday
    - cron: '0 0 * * 1'
  # Allow manual triggering
  workflow_dispatch:

# Set permissions for the GITHUB_TOKEN
permissions:
  contents: write
  pull-requests: write

jobs:
  update-tranco:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      - name: Set up date variables
        id: date
        run: |
          echo "today=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
          echo "timestamp=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT
      
      - name: Fetch Tranco list ID
        id: tranco-id
        run: |
          # Use curl's built-in retry mechanism with more robust settings
          TRANCO_ID=$(curl -s --retry 5 --retry-delay 5 --retry-max-time 120 --connect-timeout 10 --max-time 60 https://tranco-list.eu/top-1m-id)
          
          # Check if we got a valid ID (non-empty and contains alphanumeric characters)
          if [[ ! -z "$TRANCO_ID" && "$TRANCO_ID" =~ ^[A-Za-z0-9]+$ ]]; then
            echo "id=$TRANCO_ID" >> $GITHUB_OUTPUT
            echo "Successfully fetched Tranco list ID: $TRANCO_ID"
          else
            echo "Received invalid Tranco ID: '$TRANCO_ID'"
            exit 1
          fi
      
      - name: Download Tranco list
        id: download
        run: |
          # Similarly, use curl's built-in retry mechanism here too
          if curl -s -L --retry 5 --retry-delay 10 --retry-max-time 300 --connect-timeout 15 --max-time 300 "https://tranco-list.eu/download_daily/${{ steps.tranco-id.outputs.id }}" -o tranco.zip; then
            echo "Successfully downloaded Tranco list ${{ steps.tranco-id.outputs.id }}"
          else
            echo "Failed to download Tranco list"
            exit 1
          fi
      
      - name: Extract Tranco list
        id: extract
        run: |
          if unzip -o tranco.zip; then
            if [ -f "top-1m.csv" ]; then
              echo "Successfully extracted Tranco list"
            else
              echo "Expected file 'top-1m.csv' not found in the zip archive"
              ls -la
              exit 1
            fi
          else
            echo "Failed to extract zip file"
            exit 1
          fi
      
      - name: Validate Tranco list
        id: validate
        run: |
          # Count lines to verify it's exactly 1 million
          LINE_COUNT=$(wc -l < top-1m.csv)
          
          # Verify the first line starts with "1,"
          FIRST_LINE=$(head -n 1 top-1m.csv)
          
          # Verify the last line starts with "1000000,"
          LAST_LINE=$(tail -n 1 top-1m.csv)
          
          if [ "$LINE_COUNT" -eq 1000000 ] && [[ "$FIRST_LINE" =~ ^1, ]] && [[ "$LAST_LINE" =~ ^1000000, ]]; then
            echo "File validation passed:"
            echo "- Exactly 1,000,000 lines"
            echo "- First line: $FIRST_LINE"
            echo "- Last line: $LAST_LINE"
            
            # Move the file to desired location
            mv top-1m.csv tranco.csv
          else
            echo "File validation failed:"
            echo "- Line count: $LINE_COUNT (expected 1,000,000)"
            echo "- First line: $FIRST_LINE (should start with '1,')"
            echo "- Last line: $LAST_LINE (should start with '1000000,')"
            exit 1
          fi
      
      - name: Create and push branch
        id: create-branch
        run: |
          # Create a unique branch name with timestamp
          BRANCH_NAME="tranco_update-${{ steps.date.outputs.today }}-${{ steps.date.outputs.timestamp }}"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          git checkout -b "$BRANCH_NAME"
          git add tranco.csv
          git commit -m "Update Tranco list for ${{ steps.date.outputs.today }} (ID: ${{ steps.tranco-id.outputs.id }})"
          git push origin "$BRANCH_NAME"
      
      - name: Create Pull Request
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr create \
            --title "Update Tranco list - ${{ steps.date.outputs.today }}" \
            --body "This PR updates the Tranco top 1 million domains list.
            
            - Date: ${{ steps.date.outputs.today }}
            - Tranco List ID: ${{ steps.tranco-id.outputs.id }}
            - List URL: https://tranco-list.eu/list/${{ steps.tranco-id.outputs.id }}
            - Automated update via GitHub Actions" \
            --head "${{ steps.create-branch.outputs.branch_name }}" \
            --base "master"
